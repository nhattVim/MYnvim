name: Generate README for Plugins

on:
  push:
    paths:
      - "lua/plugins/**"
      - ".github/workflows/readme.yml"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-readme:
    runs-on: ubuntu-latest
    env:
      README_FILE: README.md
      HEADER_FILE: .github/readme/README.header.md
      PLUGIN_FILE: .github/readme/README.plugins.md
      FOOTER_FILE: .github/readme/README.footer.md
      PLUGIN_FILE_TMP: .README.plugins.md

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Lua
        uses: ljmf00/setup-lua@v1.0.0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate plugin list
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p .cache
          
          > "$PLUGIN_FILE_TMP"

          declare -A plugin_to_group
          declare -A grouped_plugins_temp

          mapfile -t plugin_files < <(find lua/plugins -type f -name '*.lua' | grep -v '/unused/')

          for plugin in "${plugin_files[@]}"; do
            mapfile -t repos < <(
              grep -oE '"[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+"' "$plugin" \
                | sed 's/"//g' \
                | grep -vE '^\.' \
                | grep -vE '^\$'
            )

            if [[ "$plugin" =~ lua/plugins/([^/]+)/ ]]; then
              group="${BASH_REMATCH[1]}"
            else
              group="Others"
            fi

            for name in "${repos[@]}"; do
              plugin_to_group["$name"]="$group"
              grouped_plugins_temp["$group"]+="$name"$'\n'
            done
          done

          declare -A final_plugins
          for group in "${!grouped_plugins_temp[@]}"; do
            while read -r name; do
              [ -z "$name" ] && continue
              final_plugins["$name"]=1
            done <<< "${grouped_plugins_temp[$group]}"
          done

          mapfile -t sorted_groups < <(printf "%s\n" "${plugin_to_group[@]}" | grep -v '^Others$' | sort -u)
          sorted_groups+=("Others")

          for group in "${sorted_groups[@]}"; do
            plugins_in_group=()
            for name in "${!plugin_to_group[@]}"; do
              [[ "${plugin_to_group[$name]}" == "$group" ]] && plugins_in_group+=("$name")
            done
            [ ${#plugins_in_group[@]} -eq 0 ] && continue

            echo "## $(tr '[:lower:]' '[:upper:]' <<< ${group:0:1})${group:1} Plugins" >> "$PLUGIN_FILE_TMP"
            echo "" >> "$PLUGIN_FILE_TMP"
            echo "| Name | Description | Optional? |" >> "$PLUGIN_FILE_TMP"
            echo "| ---- | ----------- | --------- |" >> "$PLUGIN_FILE_TMP"

            for name in "${plugins_in_group[@]}"; do
              [ -z "$name" ] && continue

              cache_file=".cache/$(echo "$name" | sed 's|/|_|g').json"
              if [ -f "$cache_file" ]; then
                desc=$(jq -r '.description' "$cache_file")
              else
                curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$name" -o "$cache_file"
                desc=$(jq -r '.description' "$cache_file")
              fi

              [[ "$desc" == "null" ]] && desc=""
              optional=""
              files=$(grep -rl "$name" lua/plugins | grep -v '/unused/' || true)
              for file in $files; do
                if grep -qiE "\"$name\".*optional" "$file"; then
                  optional="_Optional_"
                  break
                fi
              done

              echo "| [$name](https://github.com/$name) | $desc | $optional |" >> "$PLUGIN_FILE_TMP"
            done
          done

          rm -rf .cache

      - name: Compare plugin list content
        id: compare
        run: |
          if cmp -s "$PLUGIN_FILE_TMP" "$PLUGIN_FILE"; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Finalize full README if changed
        if: steps.compare.outputs.changed == 'true'
        run: |
          mv "$PLUGIN_FILE_TMP" "$PLUGIN_FILE"

          {
            echo "<p align='right'><em>Last updated: $(date -u -d '+7 hour' '+%Y-%m-%d %H:%M UTC+7')</em></p>"
            echo ""
            cat "$HEADER_FILE"
            echo ""
            cat "$PLUGIN_FILE"
            echo ""
            cat "$FOOTER_FILE"
          } > "$README_FILE"

      - name: Commit & Push if changed
        if: steps.compare.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$README_FILE" "$PLUGIN_FILE"
          git commit -m "âœ… Update plugin README on $(date -u -d '+7 hour' '+%Y-%m-%d %H:%M UTC+7')"
          git push
